(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{Uxid:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return p})),n.d(t,"default",(function(){return s}));n("91GP"),n("rGqo"),n("yt8O"),n("Btvt"),n("RW0V"),n("q1tI");var a=n("7ljp"),o=n("013z");n("qKvR");function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}var l,p={},b=(l="PageDescription",function(e){return console.warn("Component "+l+" was not imported, exported, or provided by MDXProvider as global scope"),Object(a.b)("div",e)}),c={_frontmatter:p},i=o.a;function s(e){var t=e.components,n=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,["components"]);return Object(a.b)(i,r({},c,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)(b,{mdxType:"PageDescription"},Object(a.b)("p",null,"MCAS is designed for flexible deployment.  However, it is positioned for\nspecific network and memory hardware if available.")),Object(a.b)("h2",null,"Platform Preparation"),Object(a.b)("ol",null,Object(a.b)("li",{parentName:"ol"},Object(a.b)("p",{parentName:"li"},Object(a.b)("strong",{parentName:"p"},"Operating System")," - install one of the following supported distributions:"),Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},"Ubuntu 18.04 LTS x86_64"),Object(a.b)("li",{parentName:"ul"},"Fedora Core 27, 30 or 32 x86_64"),Object(a.b)("li",{parentName:"ul"},"RHEL8 x86_64"))),Object(a.b)("li",{parentName:"ol"},Object(a.b)("p",{parentName:"li"},Object(a.b)("strong",{parentName:"p"},"Mellanox RDMA")," - for high-performance MCAS supports Mellanox RDMA network\ncards and has been tested with ConnectX-4 and ConnectX-5.  MCAS can operate with\nplain TCP/IP sockets, but performance is significantly slower.  Mellanox OFED\n(OpenFabrics Enterprise Distribution for Linux) distributions can be downloaded\nfrom ",Object(a.b)("a",r({parentName:"p"},{href:"https://www.mellanox.com/products/infiniband-drivers/linux/mlnx_ofed"}),"https://www.mellanox.com/products/infiniband-drivers/linux/mlnx_ofed"),"."),Object(a.b)("pre",{parentName:"li"},Object(a.b)("code",r({parentName:"pre"},{className:"language-bash"}),"  $ ibdev2netdev\n  mlx5_0 port 1 ==> enp216s0f0 (Up)\n  mlx5_1 port 1 ==> enp216s0f1 (Up)\n"))),Object(a.b)("li",{parentName:"ol"},Object(a.b)("p",{parentName:"li"},Object(a.b)("strong",{parentName:"p"},"Persistent Memory")," - MCAS is designed explicitly for persistent memory.  However,\nit can be used with DRAM only (mapstore) or with emulated persistent memory.\nEmulated or real persistent memory must be\nconfigured in ",Object(a.b)("em",{parentName:"p"},"device DAX")," mode.  See ",Object(a.b)("a",r({parentName:"p"},{href:"https://pmem.io/2016/02/22/pm-emulation.html"}),"https://pmem.io/2016/02/22/pm-emulation.html")," for\ninformation on PM emulation.  Verify availability of devdax PM:"),Object(a.b)("pre",{parentName:"li"},Object(a.b)("code",r({parentName:"pre"},{className:"language-bash"}),"ls /dev/dax*\nchmod a+rwx /dev/dax*\n")))),Object(a.b)("h2",null,"Building MCAS"),Object(a.b)("ol",null,Object(a.b)("li",{parentName:"ol"},Object(a.b)("p",{parentName:"li"},"Check out source and update submodules:"),Object(a.b)("pre",{parentName:"li"},Object(a.b)("code",r({parentName:"pre"},{className:"language-sh"}),"git clone https://github.com/IBM/mcas.git\ncd mcas\ngit submodule update --init --recursive\n"))),Object(a.b)("li",{parentName:"ol"},Object(a.b)("p",{parentName:"li"},"Install package dependencies. For example:"),Object(a.b)("pre",{parentName:"li"},Object(a.b)("code",r({parentName:"pre"},{className:"language-sh"}),"cd mcas/deps\nsudo ./install-yum-fc27.sh\n"))),Object(a.b)("li",{parentName:"ol"},Object(a.b)("p",{parentName:"li"},"Configure cmake build (e.g. release build):"),Object(a.b)("pre",{parentName:"li"},Object(a.b)("code",r({parentName:"pre"},{className:"language-sh"}),"mkdir build\ncd build\ncmake -DBUILD_KERNEL_SUPPORT=ON -DFLATBUFFERS_BUILD_TESTS=0 -DTBB_BUILD_TESTS=0 -DBUILD_PYTHON_SUPPORT=1 -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX:PATH=`pwd`/dist ..\n"))),Object(a.b)("li",{parentName:"ol"},Object(a.b)("p",{parentName:"li"},"Make bootstrap (this only needs to happen once):"),Object(a.b)("pre",{parentName:"li"},Object(a.b)("code",r({parentName:"pre"},{className:"language-sh"}),"make bootstrap\n"))),Object(a.b)("li",{parentName:"ol"},Object(a.b)("p",{parentName:"li"},"Perform rest of build (which can be repeated on code change):"),Object(a.b)("pre",{parentName:"li"},Object(a.b)("code",r({parentName:"pre"},{className:"language-sh"}),"make -j install\n")))),Object(a.b)("h2",null,"Before running code"),Object(a.b)("p",null,"MCAS currently requires two custom kernel modules.  One, ",Object(a.b)("inlineCode",{parentName:"p"},"xpmem.ko")," is needed for the ‘mapstore’ backend component.  The other, ",Object(a.b)("inlineCode",{parentName:"p"},"mcasmod.ko")," is needed for the ‘hstore’ components.  Normmaly, both modules should be loaded into the system after they have been build."),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-sh"}),"insmod ./dist/lib/modules/4.18.19-100.fc27.x86_64/xpmem.ko\n")),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-sh"}),"insmod ./dist/bin/mcasmod.ko\n")),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Note"),": the ",Object(a.b)("em",{parentName:"p"},"hstore")," backend is preferred.  If you are using the\n",Object(a.b)("em",{parentName:"p"},"mapstore")," backend, the direct operations (e.g. ‘get_direct,\nput_direct) that perform zero-copy DMA transfers will not work."),Object(a.b)("h2",null,"Running an example"),Object(a.b)("h3",null,"Launch MCAS server"),Object(a.b)("p",null,"The MCAS server can be launched from the build directory.  Using one of the pre-supplied (testing) configuration files:"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-bash"}),"./dist/bin/mcas --conf ./dist/testing/mapstore-0.conf\n")),Object(a.b)("p",null,"This configuration file defines a single shard, using port 11911 on the ",Object(a.b)("inlineCode",{parentName:"p"},"mlx5_0")," RDMA NIC adapter."),Object(a.b)("p",null,"Note, ",Object(a.b)("inlineCode",{parentName:"p"},"./dist")," is the location of the installed distribution."),Object(a.b)("h3",null,"Launch the Python client"),Object(a.b)("p",null,"Again, from the build directory:"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-bash"}),"./dist/bin/mcas-shell\n")),Object(a.b)("p",null,"First open a session to the MCAS server:"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-python"}),"session = mcas.Session(ip='10.0.0.101', port=11911)\n")),Object(a.b)("p",null,"Next create a pool. Provide pool name, size of pool in bytes and expected number of objects (presizes hash table):"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-python"}),"pool = session.create_pool('pool0', 64*1024, 1000)\n")),Object(a.b)("p",null,"Now we can create key-value pairs:"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-python"}),"pool.put('myPet','doggy')\n")),Object(a.b)("p",null,"And then retrieve the value back:"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-python"}),"pool.get('myPet')\n")),Object(a.b)("p",null,"We can configure a volatile index for the pool.  This allows us to perform scans on the key space - find_key(expression, offset)."),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-python"}),"pool.configure(\"AddIndex::VolatileTree\")\npool.find_key('regex:.*', 0)\n")),Object(a.b)("p",null,"Finally, the pool can be closed."),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-python"}),"pool.close()\n")))}s.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-getting-started-index-mdx-5dd8860e035f564e88da.js.map