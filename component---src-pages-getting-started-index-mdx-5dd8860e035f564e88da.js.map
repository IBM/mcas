{"version":3,"sources":["webpack:///./src/pages/getting-started/index.mdx"],"names":["name","_frontmatter","PageDescription","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---src-pages-getting-started-index-mdx-5dd8860e035f564e88da.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/danielwaddington/mcas/docs/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst PageDescription = makeShortcode(\"PageDescription\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <PageDescription mdxType=\"PageDescription\">\n      <p>{`MCAS is designed for flexible deployment.  However, it is positioned for\nspecific network and memory hardware if available.`}</p>\n    </PageDescription>\n    <h2>{`Platform Preparation`}</h2>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Operating System`}</strong>{` - install one of the following supported distributions:`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`Ubuntu 18.04 LTS x86_64`}</li>\n          <li parentName=\"ul\">{`Fedora Core 27, 30 or 32 x86_64`}</li>\n          <li parentName=\"ul\">{`RHEL8 x86_64`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Mellanox RDMA`}</strong>{` - for high-performance MCAS supports Mellanox RDMA network\ncards and has been tested with ConnectX-4 and ConnectX-5.  MCAS can operate with\nplain TCP/IP sockets, but performance is significantly slower.  Mellanox OFED\n(OpenFabrics Enterprise Distribution for Linux) distributions can be downloaded\nfrom `}<a parentName=\"p\" {...{\n            \"href\": \"https://www.mellanox.com/products/infiniband-drivers/linux/mlnx_ofed\"\n          }}>{`https://www.mellanox.com/products/infiniband-drivers/linux/mlnx_ofed`}</a>{`.`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`  $ ibdev2netdev\n  mlx5_0 port 1 ==> enp216s0f0 (Up)\n  mlx5_1 port 1 ==> enp216s0f1 (Up)\n`}</code></pre>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Persistent Memory`}</strong>{` - MCAS is designed explicitly for persistent memory.  However,\nit can be used with DRAM only (mapstore) or with emulated persistent memory.\nEmulated or real persistent memory must be\nconfigured in `}<em parentName=\"p\">{`device DAX`}</em>{` mode.  See `}<a parentName=\"p\" {...{\n            \"href\": \"https://pmem.io/2016/02/22/pm-emulation.html\"\n          }}>{`https://pmem.io/2016/02/22/pm-emulation.html`}</a>{` for\ninformation on PM emulation.  Verify availability of devdax PM:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`ls /dev/dax*\nchmod a+rwx /dev/dax*\n`}</code></pre>\n      </li>\n    </ol>\n    <h2>{`Building MCAS`}</h2>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Check out source and update submodules:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-sh\"\n          }}>{`git clone https://github.com/IBM/mcas.git\ncd mcas\ngit submodule update --init --recursive\n`}</code></pre>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Install package dependencies. For example:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-sh\"\n          }}>{`cd mcas/deps\nsudo ./install-yum-fc27.sh\n`}</code></pre>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Configure cmake build (e.g. release build):`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-sh\"\n          }}>{`mkdir build\ncd build\ncmake -DBUILD_KERNEL_SUPPORT=ON -DFLATBUFFERS_BUILD_TESTS=0 -DTBB_BUILD_TESTS=0 -DBUILD_PYTHON_SUPPORT=1 -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX:PATH=\\`pwd\\`/dist ..\n`}</code></pre>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Make bootstrap (this only needs to happen once):`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-sh\"\n          }}>{`make bootstrap\n`}</code></pre>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Perform rest of build (which can be repeated on code change):`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-sh\"\n          }}>{`make -j install\n`}</code></pre>\n      </li>\n    </ol>\n    <h2>{`Before running code`}</h2>\n    <p>{`MCAS currently requires two custom kernel modules.  One, `}<inlineCode parentName=\"p\">{`xpmem.ko`}</inlineCode>{` is needed for the ‘mapstore’ backend component.  The other, `}<inlineCode parentName=\"p\">{`mcasmod.ko`}</inlineCode>{` is needed for the ‘hstore’ components.  Normmaly, both modules should be loaded into the system after they have been build.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sh\"\n      }}>{`insmod ./dist/lib/modules/4.18.19-100.fc27.x86_64/xpmem.ko\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sh\"\n      }}>{`insmod ./dist/bin/mcasmod.ko\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Note`}</strong>{`: the `}<em parentName=\"p\">{`hstore`}</em>{` backend is preferred.  If you are using the\n`}<em parentName=\"p\">{`mapstore`}</em>{` backend, the direct operations (e.g. ‘get_direct,\nput_direct) that perform zero-copy DMA transfers will not work.`}</p>\n    <h2>{`Running an example`}</h2>\n    <h3>{`Launch MCAS server`}</h3>\n    <p>{`The MCAS server can be launched from the build directory.  Using one of the pre-supplied (testing) configuration files:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`./dist/bin/mcas --conf ./dist/testing/mapstore-0.conf\n`}</code></pre>\n    <p>{`This configuration file defines a single shard, using port 11911 on the `}<inlineCode parentName=\"p\">{`mlx5_0`}</inlineCode>{` RDMA NIC adapter.`}</p>\n    <p>{`Note, `}<inlineCode parentName=\"p\">{`./dist`}</inlineCode>{` is the location of the installed distribution.`}</p>\n    <h3>{`Launch the Python client`}</h3>\n    <p>{`Again, from the build directory:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`./dist/bin/mcas-shell\n`}</code></pre>\n    <p>{`First open a session to the MCAS server:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`session = mcas.Session(ip='10.0.0.101', port=11911)\n`}</code></pre>\n    <p>{`Next create a pool. Provide pool name, size of pool in bytes and expected number of objects (presizes hash table):`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`pool = session.create_pool('pool0', 64*1024, 1000)\n`}</code></pre>\n    <p>{`Now we can create key-value pairs:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`pool.put('myPet','doggy')\n`}</code></pre>\n    <p>{`And then retrieve the value back:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`pool.get('myPet')\n`}</code></pre>\n    <p>{`We can configure a volatile index for the pool.  This allows us to perform scans on the key space - find_key(expression, offset).`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`pool.configure(\"AddIndex::VolatileTree\")\npool.find_key('regex:.*', 0)\n`}</code></pre>\n    <p>{`Finally, the pool can be closed.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`pool.close()\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}